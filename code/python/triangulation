# References
# https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_shi_tomasi/py_shi_tomasi.html

import numpy as np 
import cv2 
import triangle as tr
from matplotlib import pyplot as plt 

# read the image 
img = cv2.imread('Polygons.JPG') 
plt.imshow(img)

# convert image to gray scale image 
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) 

## NEED TO AUTOMATE NUMBER OF CORNERS
# detect corners with the goodFeaturesToTrack function. 
corners = cv2.goodFeaturesToTrack(gray, 22, 0.01, 10) 
corners = np.int0(corners) 

# iterate through corners and plot them
for i in corners: 
 	x, y = i.ravel() 
 	cv2.circle(img, (x, y), 3, 255, -1) 
    

plt.imshow(img)

corners = corners.reshape(22,2)
    
holes = np.array([[90, 50], [180, 60], [150, 130], [110, 190], [180, 190]])
segments = np.array([[8, 1], [1, 14], [14, 20], [20, 8], [3, 0], [0, 15], [15, 3], [4, 18], [4, 21], [18, 21], [17, 10], [10, 16], [16, 19], [19, 17], [7, 5], [5, 12], [12, 13], [13, 7], [9, 6], [6, 2], [2, 11], [11, 9]])


# Create Dictionary  
poly = {'holes': holes,
            'vertices': corners,
            'segments': segments} 

t = tr.triangulate(poly, 'pc')
tr.compare(plt, poly, t)
plt.show()

triList = t['triangles'];
nodes = {}
 
# # find and plot centers of triangles
for k in range(len(triList)):
    # coordinate of the vertices  
    vert1 = corners[triList[k][0]]
    vert2 = corners[triList[k][1]]
    vert3 = corners[triList[k][2]]
    # calculate centroid  
    x = np.uint8((vert1[0] + vert2[0] + vert3[0]) / 3)
    y = np.uint8((vert1[1] + vert2[1] + vert3[1]) / 3)
    cv2.circle(img, (x, y), 3, 0, -1) 
    # store in a node dictionary
    nodes[k] = [x, y]
    
plt.imshow(img)
